import math


def sigmoid(x):
    return 1 / (1 + math.e ** -x)


inputs = [1, 1.5, 2, 0, 0, 0, 0, 0]

weights = [
    [0.45, 0.72, 0.3],
    [-0.12, 0.13, -0.1],
    [0.18, -0.56, 0.8],
    [0.15, 0.2],
    [-2.3, -1.7],
    [0.66, 0.21]
]


def nn(i, w):
    i[3] = i[0] * w[0][0] + i[1] * w[1][0] + i[2] * w[2][0]#0.63
    i[3] = sigmoid(i[3])#0.65

    i[4] = i[0] * w[0][1] + i[1] * w[1][1] + i[2] * w[2][1]#-0.2
    i[4] = sigmoid(i[4])#0.45

    i[5] = i[0] * w[0][2] + i[1] * w[1][2] + i[2] * w[2][2]#1.75
    i[5] = sigmoid(i[5])#0.85

    i[6] = i[3] * w[3][0] + i[4] * w[4][0] + i[5] * w[5][0]#-0.37
    i[6] = sigmoid(i[6])#0.4

    i[7] = i[3] * w[3][1] + i[4] * w[4][1] + i[5] * w[5][1]#-0.45
    i[7] = sigmoid(i[7])#0.39

    print(i)


inputs2 = [0, 1, 1.5, 2, 0, 0, 0, 0, 0]
weights2 = [
    [],
    [0.45, -0.12, 0.18],
    [0.72, 0.13, -0.56],
    [0.3, -0.1, 0.8],
    [0.15, -2.3, 0.66],
    [0.2, -1.7, 0.21],
]


def nn2(i, w):
    i[4] = i[1] * w[1][0] + i[2] * w[1][1] + i[3] * w[1][2] #0.63
    i[4] = sigmoid(i[4]) #0.65

    i[5] = i[1] * w[2][0] + i[2] * w[2][1] + i[3] * w[2][2]#-0.2
    i[5] = sigmoid(i[5])#0.45

    i[6] = i[1] * w[3][0] + i[2] * w[3][1] + i[3] * w[3][2]#1.75
    i[6] = sigmoid(i[6])#0.85

    i[7] = i[4] * w[4][0] + i[5] * w[4][1] + i[6] * w[4][2]#-0.37
    i[7] = sigmoid(i[7])#0.4

    i[8] = i[4] * w[5][0] + i[5] * w[5][1] + i[6] * w[5][2]#-0.45
    i[8] = sigmoid(i[8])#0.39

    print(i)




def nn3(i, w):
    i[4] = i[1] * w[1][4] + i[2] * w[2][4] + i[3] * w[3][4] #0.63
    i[4] = sigmoid(i[4]) #0.65

    i[5] = i[1] * w[1][5] + i[2] * w[2][5] + i[3] * w[3][5]#-0.2
    i[5] = sigmoid(i[5])#0.45

    i[6] = i[1] * w[1][6] + i[2] * w[2][6] + i[3] * w[3][6]#1.75
    i[6] = sigmoid(i[6])#0.85

    i[7] = i[4] * w[4][7] + i[5] * w[5][7] + i[6] * w[6][7]#-2.0
    i[7] = sigmoid(i[7])#0.11

    i[8] = i[4] * w[4][8] + i[5] * w[5][8] + i[6] * w[6][8]#-2.0
    i[8] = sigmoid(i[8])#0.11

    print(i)

nn(inputs, weights)
nn2(inputs2, weights2)
